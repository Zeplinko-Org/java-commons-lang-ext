package org.zeplinko.commons.lang.ext.core;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;

import java.util.function.Function;

/**
 * A generic class for wrapping the result of an operation that can either
 * succeed or fail. This class holds either data (on success) or an error object
 * (on failure), but not both. Use static factory methods {@code ok} and
 * {@code error} to create instances of this class.
 *
 * @param <S> the type of the data returned on success
 * @param <T> the type of the error object returned on failure
 */
@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class Result<S, T> {

    private final S data;

    private final T error;

    /**
     * Creates a successful result containing the provided data.
     *
     * @param data The data to be contained in the result.
     * @param <S>  The type of the success data.
     * @param <T>  The type of the failure error object.
     * @return A {@code Result} instance representing success.
     */
    public static <S, T> Result<S, T> ok(S data) {
        return new Result<>(data, null);
    }

    /**
     * Creates a failed result containing the provided error.
     *
     * @param error The error object to be contained in the result.
     * @param <S>   The type of the success data.
     * @param <T>   The type of the failure error object.
     * @return A {@code Result} instance representing failure.
     */
    public static <S, T> Result<S, T> error(T error) {
        return new Result<>(null, error);
    }

    /**
     * Returns the data of the operation if it succeeded; otherwise, returns the
     * null value.
     *
     * @return The success data, or null if the result is a failure.
     */
    public S getData() {
        return this.data;
    }

    /**
     * Return the error object of the operation if it failed; otherwise, returns the
     * null value.
     *
     * @return The error object, or null if the result is successful.
     */
    public T getError() {
        return this.error;
    }

    /**
     * Checks if the result represents success.
     *
     * @return {@code true} if the result is successful, {@code false} otherwise.
     */
    public boolean isSuccess() {
        return !isFailure();
    }

    /**
     * Checks if the result represents failure.
     *
     * @return {@code true} if the result is a failure, {@code false} otherwise.
     */
    public boolean isFailure() {
        return this.getError() != null;
    }

    /**
     * Returns the data if the result is successful; otherwise, returns the other
     * specified value.
     *
     * @param other The value to return if the result is a failure.
     * @return The success data, or {@code other} if the result is a failure.
     */
    public S orElse(S other) {
        return this.isFailure() ? other : this.getData();
    }

    /**
     * Returns the data if the result is successful; otherwise, applies the provided
     * function to the error and returns the result.
     *
     * @param otherFunction The function to apply to the error if the result is a
     *                      failure.
     * @return The success data, or the result of applying {@code otherFunction} to
     *         the error.
     */
    public S orElseGet(Function<T, ? extends S> otherFunction) {
        return this.isFailure() ? otherFunction.apply(this.getError()) : this.getData();
    }

    /**
     * Returns the data if the result is successful; otherwise, throws the exception
     * provided by the function applied to the error.
     *
     * @param exceptionFunction The function to apply to the error to generate an
     *                          exception.
     * @param <X>               The type of the exception to be thrown if the result
     *                          is a failure.
     * @return The success data.
     * @throws X if the result is a failure, the exception generated by applying
     *           {@code exceptionFunction} to the error.
     */
    public <X extends Throwable> S orElseThrow(Function<T, ? extends X> exceptionFunction) throws X {
        if (this.isFailure()) {
            throw exceptionFunction.apply(this.getError());
        }
        return this.getData();
    }
}
